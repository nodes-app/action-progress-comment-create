name: Create Progress Comment
description: Creates Progress Comment
branding:
  icon: message-square
  color: blue

inputs:
  token:
    description: Personal Access Token
    required: true
  issue-number:
    description: Issue Number
    required: true
    default: ${{ github.event.issue.number }}
  repository:
    description: GitHub Repository (username/repo-name)
    required: true
    default: ${{ github.repository }}
  tasks:
    description: Tasks
    required: true
  task-format:
    description: Task format
    required: false
    default: $STATUS  $NAME  $DURATION
  duration-format:
    description: Format of task duration
    required: false
    default: (${DURATION}s)
  duration-estimate-format:
    description: Format of task duration estimate
    required: false
    default: (about ${DURATION_ESTIMATE}s)
  title-in-progress:
    description: Title to display over tasks while in progress
    required: false
    default: In Progress
  title-success:
    description: Title to display after all tasks are marked successful
    required: false
    default: Done
  title-failure:
    description: Title to display after a task fails
    required: false
    default: Failed
  message-in-progress:
    description: Message to display while tasks are in progress
    required: false
    default: The tasks are in progress.
  message-in-progress-duration-estimate:
    description: Additional message to display a duration estimate if one is available
    required: false
    default: This will take about $DURATION_ESTIMATE seconds.
  message-success: 
    description: Message to display after successful completion of all tasks
    required: false
    default: All tasks were successfully completed in $DURATION seconds.
  message-failure:
    description: Message to display after a task fails
    required: false
    default: 'A task failed: $ERROR'
  status-label-waiting:
    description: Status label for waiting task
    required: false
    default: ':radio_button:'
  status-label-running:
    description: Status label for running task
    required: false
    default: ':cyclone:'
  status-label-success:
    description: Status label for successfully completed task
    required: false
    default: ':heavy_check_mark:'
  status-label-failure:
    description: Status label for failed task
    required: false
    default: ':x:'
  status-label-cancelled:
    description: Status label for cancelled task
    required: false
    default: ':heavy_multiplication_x:'
  error:
    description: Error to display as part of the failure message
    required: false
    default: An error occurred.
  auto-close:
    description: Close issue on success or failure
    required: false
    default: 'true'

runs:
  using: composite
  steps:

    - shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
        ISSUE_NUMBER: ${{ inputs.issue-number }}
        REPOSITORY: ${{ inputs.repository }}
        TASKS: ${{ inputs.tasks }}
        TASK_FORMAT: ${{ inputs.task-format }}
        DURATION_FORMAT: ${{ inputs.duration-format }}
        DURATION_ESTIMATE_FORMAT: ${{ inputs.duration-estimate-format }}
        TITLE_IN_PROGRESS: ${{ inputs.title-in-progress }}
        TITLE_SUCCESS: ${{ inputs.title-success }}
        TITLE_FAILURE: ${{ inputs.title-failure }}
        MESSAGE_IN_PROGRESS: ${{ inputs.message-in-progress }}
        MESSAGE_IN_PROGRESS_DURATION_ESTIMATE: ${{ inputs.message-in-progress-duration-estimate }}
        MESSAGE_SUCCESS: ${{ inputs.message-success }}
        MESSAGE_FAILURE: ${{ inputs.message-failure }}
        STATUS_LABEL_WAITING: ${{ inputs.status-label-waiting }}
        STATUS_LABEL_RUNNING: ${{ inputs.status-label-running }}
        STATUS_LABEL_SUCCESS: ${{ inputs.status-label-success }}
        STATUS_LABEL_FAILURE: ${{ inputs.status-label-failure }}
        STATUS_LABEL_CANCELLED: ${{ inputs.status-label-cancelled }}
        ERROR: ${{ inputs.error }}
        AUTO_CLOSE: ${{ inputs.auto-close }}
      run: |
        username=$(gh api -H "Accept: application/vnd.github+json" /user --jq '.login') &
        title=$(gh issue view "$ISSUE_NUMBER" --repo "$REPOSITORY" --json title --jq '.title')
        wait
        eval "$(
          gh issue list \
            --repo "$REPOSITORY" \
            --json title,number,comments \
            --state all \
            --search "$title in:title commenter:$username" \
          | jq \
            -r \
            --arg title "$title" \
            --arg username "$username" \
            $'
            (
              env.TASKS
              | split("\n")
              | [
                .[]
                | select(. != "")
              ]
            ) as $task_names
            |
            (
              [
                .[]
                | select(.number == (env.ISSUE_NUMBER | fromjson))
              ]
              | if (length == 0) then []
                else (
                  .[0]
                  |
                  [
                    .comments[]
                    | select(
                        .author.login == $username
                        and (.body | startswith("<!-- [{"))
                      )
                  ]
                  | if (length == 0) then []
                    else (
                      .[0]
                      | .body
                      | split(" -->")[0] 
                      | ltrimstr("<!-- ")
                      | fromjson
                    ) end
                ) end
            ) as $state
            |
            [
              .[] 
              | select(.title == $title) 
              | .comments[] 
              | select(
                  .author.login == $username
                  and (.body | startswith("<!-- [{"))
                )
              | .body 
              | split(" -->")[0] 
              | ltrimstr("<!-- ")
              | fromjson
              | select(
                  .[-1].status == "success"
                  and [.[-1].tasks[].name] == $task_names
                  and all(
                    .[-1].tasks[]; 
                    .status == "success"
                    and .started > -1
                    and .stopped > -1
                  )
                )
            ][:5] as $successful_previous_states
            | ($task_names | length) as $task_count 
            | ($successful_previous_states | length) as $successful_previous_state_count
            | (now | floor) as $now
            | $state 
            | . += [{
                "status": "in_progress", 
                "started": $now,
                "updated": $now,
                "stopped": -1,
                "error": env.ERROR,
                "auto_close": (env.AUTO_CLOSE | fromjson),
                "task_format": env.TASK_FORMAT,
                "duration_format": env.DURATION_FORMAT,
                "duration_estimate_format": env.DURATION_ESTIMATE_FORMAT,
                "title_in_progress": env.TITLE_IN_PROGRESS,
                "title_success": env.TITLE_SUCCESS,
                "title_failure": env.TITLE_FAILURE,
                "message_in_progress": env.MESSAGE_IN_PROGRESS,
                "message_in_progress_duration_estimate": env.MESSAGE_IN_PROGRESS_DURATION_ESTIMATE,
                "message_success": env.MESSAGE_SUCCESS,
                "message_failure": env.MESSAGE_FAILURE,
                "status_label_waiting": env.STATUS_LABEL_WAITING,
                "status_label_running": env.STATUS_LABEL_RUNNING,
                "status_label_success": env.STATUS_LABEL_SUCCESS,
                "status_label_failure": env.STATUS_LABEL_FAILURE,
                "status_label_cancelled": env.STATUS_LABEL_CANCELLED,
                "duration_estimate": (
                  if $successful_previous_state_count == 0
                  then -1
                  else (
                    [
                      $successful_previous_states
                      | .[]
                      | .[-1]
                      | .stopped - .started
                    ]
                    | add / $successful_previous_state_count
                    | floor
                  ) end
                ),
                "tasks": (
                  [range($task_count)]
                  | map(
                    . as $i
                    | $task_names[$i] as $name
                    | 
                      {
                        "name": $name,
                        "status": (
                          if $i == 0
                          then "running"
                          else "waiting" end
                        ),
                        "started": (
                          if $i == 0 then $now else -1 end
                        ),
                        "stopped": -1,
                        "duration_estimate": (
                          if $successful_previous_state_count == 0
                          then -1
                          else (
                            [
                              $successful_previous_states
                              | .[]
                              | .[-1].tasks[$i]
                              | .stopped - .started
                            ]
                            | add / $successful_previous_state_count
                            | floor
                          ) end
                        )
                      }
                  )
                )
              }]
            | . as $state
            | .[-1]
            | .status as $status
            | .title_in_progress as $title
            | (
              .duration_estimate as $duration_estimate
              | if $duration_estimate > -1 then (
                .message_in_progress + " " + (
                  ($duration_estimate | tostring) as $duration_estimate_str
                  | .message_in_progress_duration_estimate
                  | gsub("\\\${DURATION_ESTIMATE}"; $duration_estimate_str)
                  | gsub("\\\$DURATION_ESTIMATE"; $duration_estimate_str)
                )
              ) else (
                .message_in_progress
              ) end
            ) as $message
            | 
            (
              .task_format as $task_format
              | .duration_format as $duration_format
              | .duration_estimate_format as $duration_estimate_format
              |
              [
                .tasks[]
                | .name as $name
                | .status as $task_status
                | ($state | .[-1] | .["status_label_"+$task_status]) as $status_label
                | (
                  if .duration_estimate > -1 then (
                    (.duration_estimate | tostring) as $duration_estimate_str
                    | $duration_estimate_format
                    | gsub("\\\${DURATION_ESTIMATE}"; $duration_estimate_str)
                    | gsub("\\\$DURATION_ESTIMATE"; $duration_estimate_str)
                  ) else "" end
                ) as $duration
                | $task_format
                | gsub("\\\${STATUS}"; $status_label)
                | gsub("\\\$STATUS"; $status_label)
                | gsub("\\\${NAME}"; $name)
                | gsub("\\\$NAME"; $name)
                | gsub("\\\${DURATION}"; $duration)
                | gsub("\\\$DURATION"; $duration)
              ]
              | join("\n")
            ) as $tasks
            | "<!-- \($state | tostring) -->\n# \($title)\n\n\($tasks)\n\n\($message)" as $body
            | "gh issue comment \'\(env.ISSUE_NUMBER)\' --repo \'\(env.REPOSITORY)\' --body \'\($body)\'"
            '
        )"
